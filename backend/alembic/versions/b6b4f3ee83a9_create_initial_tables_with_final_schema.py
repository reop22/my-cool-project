"""Create initial tables with final schema

Revision ID: b6b4f3ee83a9
Revises: 
Create Date: 2025-07-09 14:41:39.294824

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b6b4f3ee83a9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('users',
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('trip_sheets',
    sa.Column('sheet_number', sa.String(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('series', sa.String(), nullable=True),
    sa.Column('form_okud', sa.String(), nullable=True),
    sa.Column('registration_number', sa.String(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('organization_name', sa.String(), nullable=True),
    sa.Column('organization_address', sa.String(), nullable=True),
    sa.Column('organization_phone', sa.String(), nullable=True),
    sa.Column('organization_okpo', sa.String(), nullable=True),
    sa.Column('car_model', sa.String(), nullable=True),
    sa.Column('car_plate', sa.String(), nullable=True),
    sa.Column('garage_number', sa.String(), nullable=True),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('driver_license_number', sa.String(), nullable=True),
    sa.Column('driver_license_type', sa.String(), nullable=True),
    sa.Column('driver_class', sa.String(), nullable=True),
    sa.Column('driver_snils', sa.String(), nullable=True),
    sa.Column('driver_personnel_number', sa.String(), nullable=True),
    sa.Column('transportation_type', sa.String(), nullable=True),
    sa.Column('communication_type', sa.String(), nullable=True),
    sa.Column('pre_trip_medical_check_time', sa.DateTime(), nullable=True),
    sa.Column('pre_trip_doctor_id', sa.Integer(), nullable=True),
    sa.Column('pre_trip_doctor_license', sa.String(), nullable=True),
    sa.Column('post_trip_medical_check_time', sa.DateTime(), nullable=True),
    sa.Column('post_trip_doctor_id', sa.Integer(), nullable=True),
    sa.Column('post_trip_doctor_license', sa.String(), nullable=True),
    sa.Column('assignment_dispatcher_id', sa.Integer(), nullable=True),
    sa.Column('assignment_organization_to', sa.String(), nullable=True),
    sa.Column('assignment_address', sa.String(), nullable=True),
    sa.Column('fuel_brand', sa.String(), nullable=True),
    sa.Column('fuel_code', sa.String(), nullable=True),
    sa.Column('fuel_issued_liters', sa.Float(), nullable=True),
    sa.Column('fuel_balance_start', sa.Float(), nullable=True),
    sa.Column('fuel_balance_end', sa.Float(), nullable=True),
    sa.Column('fuel_consumption_norm', sa.Float(), nullable=True),
    sa.Column('fuel_consumption_actual', sa.Float(), nullable=True),
    sa.Column('fuel_saving', sa.Float(), nullable=True),
    sa.Column('fuel_overconsumption', sa.Float(), nullable=True),
    sa.Column('departure_mechanic_id', sa.Integer(), nullable=True),
    sa.Column('departure_odometer', sa.Integer(), nullable=True),
    sa.Column('departure_actual_time', sa.DateTime(), nullable=True),
    sa.Column('pre_trip_control_notes', sa.String(), nullable=True),
    sa.Column('arrival_mechanic_id', sa.Integer(), nullable=True),
    sa.Column('arrival_odometer', sa.Integer(), nullable=True),
    sa.Column('arrival_actual_time', sa.DateTime(), nullable=True),
    sa.Column('departure_dispatcher_id', sa.Integer(), nullable=True),
    sa.Column('departure_scheduled_time', sa.DateTime(), nullable=True),
    sa.Column('arrival_dispatcher_id', sa.Integer(), nullable=True),
    sa.Column('arrival_scheduled_time', sa.DateTime(), nullable=True),
    sa.Column('idle_time_details', sa.String(), nullable=True),
    sa.Column('route_points', sa.JSON(), nullable=True),
    sa.Column('work_results_notes', sa.String(), nullable=True),
    sa.Column('salary_calculation_notes', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['arrival_dispatcher_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['arrival_mechanic_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['assignment_dispatcher_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['departure_dispatcher_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['departure_mechanic_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['driver_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['post_trip_doctor_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['pre_trip_doctor_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('trip_sheets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_trip_sheets_sheet_number'), ['sheet_number'], unique=True)

    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_roles')
    with op.batch_alter_table('trip_sheets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_trip_sheets_sheet_number'))

    op.drop_table('trip_sheets')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))

    op.drop_table('users')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))

    op.drop_table('roles')
    # ### end Alembic commands ###
